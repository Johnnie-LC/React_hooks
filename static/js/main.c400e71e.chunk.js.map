{"version":3,"sources":["context/ThemeContext.js","components/Header.jsx","components/CharacterItems.jsx","components/Characters.jsx","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","ThemeContextProvider","children","useState","theme","setTheme","Provider","value","Header","darkMode","setDarkMode","useContext","className","type","onClick","CharacterItems","characters","handleClick","isHidden","title","length","style","color","map","character","src","image","alt","name","hidden","id","initialState","favorite","favoriteReducer","state","action","payload","Characters","setCharacters","search","setSearch","useReducer","favorites","dispatch","useEffect","fetch","then","response","json","data","results","filteredUsers","useMemo","filter","user","toLowerCase","includes","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c400e71e.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst ThemeContext = React.createContext({})\n\nexport function ThemeContextProvider({ children }) {\n  const [theme, setTheme] = useState(false)\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeContext\n","import React, { useState, useContext } from 'react'\nimport '../assets/styles/components/Header.css'\nimport ThemeContext from '../context/ThemeContext'\n\n// Funcion que permite estblecer el light mode y el dark mode\n\n// el estado inicial de darkmode es false\n\nconst Header = () => {\n  const [darkMode, setDarkMode] = useState(false)\n\n  const { theme, setTheme } = useContext(ThemeContext)\n\n  // const darkmode = (isdarkMode) => {\n  //   if (!isdarkMode) {\n  //     document.querySelector('#App').style.background = 'black'\n  //     // document.querySelector('h1').style.color = 'white'\n  //   }\n  //   if (isdarkMode) {\n  //     document.querySelector('#App').style.background = 'white'\n  //     // document.querySelector('h1').style.color = 'black'\n  //   }\n  // }\n\n  const handleClick = () => {\n    setDarkMode(!darkMode)\n    darkMode ? setTheme(false) : setTheme(true)\n  }\n  return (\n    <div className={`Header ${theme ? 'lightmode' : 'darkmode'}`}>\n      <h1>ReactHooks</h1>\n      <button type=\"button\" onClick={handleClick}>\n        {darkMode ? 'Dark Mode' : 'Light Mode'}\n      </button>\n    </div>\n  )\n}\n\nexport default Header\n","const CharacterItems = ({ theme, characters, handleClick, isHidden, title }) =>\n  characters.length > 0 && (\n    <>\n      <h2\n        style={{ color: `${theme ? 'black' : 'white'}` }}\n        className={`${theme ? 'lightmode' : 'darkmode'}`}\n      >\n        {title}\n      </h2>\n      <div className={`Characters ${theme ? 'lightmode' : 'darkmode'}`}>\n        {characters.map((character) => (\n          <article className=\"Card-container\" key={character.id}>\n            <img\n              className=\"Card-image\"\n              src={character.image}\n              alt={character.name}\n            />\n            <h3 className=\"Card-name\">{character.name}</h3>\n            <button\n              type=\"button\"\n              hidden={isHidden}\n              onClick={() => handleClick(character)}\n            >\n              add to Favorite\n            </button>\n          </article>\n        ))}\n      </div>\n    </>\n  )\n\nexport default CharacterItems\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react'\nimport '../assets/styles/components/Characters.css'\nimport ThemeContext from '../context/ThemeContext'\nimport CharacterItems from './CharacterItems'\n// para usar useReducer vamos a tener un estado inicial\nconst initialState = {\n  favorite: [],\n}\n\nconst favoriteReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_FAVORITE':\n      return {\n        ...state,\n        favorite: [...state.favorite, action.payload],\n      }\n    default:\n      return state\n  }\n}\n\nconst Characters = () => {\n  const [characters, setCharacters] = useState([])\n  const { theme } = useContext(ThemeContext)\n  const [search, setSearch] = useState('')\n  // al useReducer se pasa el reducer y el initialState\n  const [favorites, dispatch] = useReducer(favoriteReducer, initialState)\n\n  useEffect(() => {\n    fetch('https://rickandmortyapi.com/api/character')\n      .then((response) => response.json())\n      .then((data) => setCharacters(data.results))\n\n    //   // Usando async Await\n    // async function fetchData() {\n    //   const response = await fetch('https://rickandmortyapi.com/api/character')\n    //   const data = await response.json()\n    //   const results = await data.results\n\n    //   setCharacters(results)\n    // }\n    // fetchData()\n  }, [])\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value)\n  }\n\n  const handleClick = (favorite) => {\n    dispatch({ type: 'ADD_TO_FAVORITE', payload: favorite })\n  }\n\n  // // filtrar los usuario\n  // const filteredUsers = characters.filter((user) => {\n  //   return user.name.toLowerCase().includes(search.toLowerCase())\n  // })\n\n  // usando Memo se opttmiza la buscqueda porque recuerda las busquedas pasadas,\n  // el 1 parametro es para la logica y el 2 paramatro queremos que escuche en\n  // los valores characters y search\n  const filteredUsers = useMemo(\n    () =>\n      characters.filter((user) =>\n        user.name.toLowerCase().includes(search.toLowerCase())\n      ),\n    [characters, search]\n  )\n  return (\n    <>\n      <CharacterItems\n        theme={theme}\n        characters={favorites.favorite}\n        handleClick={handleClick}\n        isHidden={true}\n        title=\"Favorites\"\n      />\n      <div className={`Search ${theme ? 'lightmode' : 'darkmode'}`}>\n        <input type=\"text\" value={search} onChange={handleSearch} />\n      </div>\n\n      <CharacterItems\n        theme={theme}\n        characters={filteredUsers}\n        handleClick={handleClick}\n        isHidden={false}\n        title=\"Characters\"\n      />\n    </>\n  )\n}\n\nexport default Characters\n","import './App.css'\nimport './assets/styles/App.css'\nimport Header from './components/Header'\nimport Characters from './components/Characters'\n\nfunction App() {\n  return (\n    <div className=\"App\" id=\"App\">\n      <Header />\n      <Characters />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n// import ThemeContext from './context/ThemeContext'\n// ThemeContext nos da un provider\nimport { ThemeContextProvider } from './context/ThemeContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}